import { TinyColor, tinyColor, random, mean } from './color.uts'
import { calcAPCA } from './apca-w3.uts'
import { generate } from './generate.uts'
import { LColorOptions, LGenerateOptions } from './interface.uts'

export class ColorLib {
	/**
	 * @name 创建TinyColor实例
	 * @description 根据给定的颜色值和选项创建一个TinyColor实例。
	 * @param {any} [color=''] - 颜色值，可以是字符串、数字或其他颜色表示形式。
	 * @param {LColorOptions} [opts={}] - 配置选项，用于调整颜色处理的行为。
	 * @returns {TinyColor} 返回一个TinyColor实例。
	 * @example
	 * // 示例用法
	 * const c = tinyColor('#ff6347');
	 */
	tinyColor(color : any = '', opts : LColorOptions = {} as LColorOptions): TinyColor{
		if (color instanceof TinyColor){
			return color.clone()
		}
		return tinyColor(color, opts)
	}
	
	/**
	 * @name 计算APCA
	 * @description 计算指定文本色与背景色的感知亮度对比数值（Lc），范围为 -108 ~ +106，浅色背景深色文字为正数、深色背景浅色文字为负数，背景与文字颜色互换后返回的是原数值的相反数。
	 * 可访问的感知对比度算法（Accessible Perceptual Contrast Algorithm，简称 APCA），基于字形属性、文本与背景的感知亮度差异、环境与上下文等特征进行对比度计算，目标是更接近人眼的实际感受。
	 * APCA 是 WCAG 3.0 无障碍标准候选方法之一。由于 WCAG 2.0 对暗黑背景的支持较差，故选用了APCA 作为计算文字-背景颜色对比度的方法。
	 * 因该项目处于实验阶段，未来可能会进行一定调整。
	 * @param {TinyColor} frontColor - 前景色。
	 * @param {TinyColor} bgColor - 背景颜色。
	 * @param {boolean} [round=true] - 是否对结果进行四舍五入。
	 * @returns {number} 返回APCA值。
	 * @example
	 * // 示例用法
	 * const apca = calcAPCA(textColor, bgColor, true);
	 */
	calcAPCA(frontColor : any, bgColor : any, round : boolean = true) : number {
		return calcAPCA(tinyColor(frontColor), tinyColor(bgColor), round)
	}
	
	/**
	 * @name 生成色板
	 * @description 引用 Ant Design 色板生成工具，仅通过提供一个主题色，快速生成1-10共10个系列颜色。支持暗色模式。
	 * @param {any} color - 输入的颜色值，可以是十六进制、RGB、RGBA、HSL、HSLA或颜色名称。
	 * @param {LGenerateOptions} [opts] - 可选的生成选项，用于指定生成色彩模式的行为，例如主题。
	 * @returns {string[]} - 返回一个包含生成的颜色模式的字符串数组。
	 * @example
	 * const colorSchemes = generate('#ff6347');
	 */
	generate(color : any, opts : LGenerateOptions = {} as LGenerateOptions) : string[] {
		return generate(color, opts)
	}
	
	/**
	 * @name 计算平均颜色
	 * @description 获取平均颜色。即返回若干个颜色的平均值。
	 * @param {any[]} colors - 颜色值数组
	 * @returns {TinyColor} 返回平均颜色。
	 * @example
	 * // 示例用法
	 * const averageColor = mean(['#ff0000', '#00ff00', '#0000ff']);
	 */
	mean(colors : any[]) : TinyColor{
		return mean(colors)
	}
	
	/**
	 * @name 生成随机颜色
	 * @description 生成一个随机的颜色。
	 * @returns {TinyColor} 返回一个随机颜色。
	 * @example
	 * const randomColor = random();
	 */
	random() : TinyColor{
		return random()
	}
}