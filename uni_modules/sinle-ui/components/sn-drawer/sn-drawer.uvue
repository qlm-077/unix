<template>
	<sn-overlay ref="overlayEle"
	:renderMode="renderMode"
	:aniTime="`${aniTimeC}ms`" 
	:opacity="maskOpacity"
	:maskClose="maskClose" 
	@clickMask="clickMask"
	:customStyle="overlayStylesC">
		<view class="sn-drawer"
		:class="drawerClassesC" 
		@click.stop 
		:style="[drawerStylesC, customStyle]">
			<sn-view :padding="padding"
			@touchmove="ontouchmove"
			@touchend="ontouchend"
			@touchcancel="ontouchend"
			style="flex: 1;">
				<view v-if="showLine"
				class="sn-drawer-line"
				:style="lineStylesC"></view>
				<slot></slot>
			</sn-view>
		</view>
	</sn-overlay>
</template>

<script setup>
	/**
	 * @name sn-drawer
	 * @tutorial https://sinleui.pages.dev/components/sn-drawer
	 * @description Drawer 抽屉
	 * 
	 * - 通常用于半屏窗口的场景。
	 * 
	 * - 请注意区分 `sn-popup` 和 `sn-drawer`。`sn-popup`只控制动画和显隐逻辑，UI 需要自己写。而  `sn-drawer` 则是在 `sn-popup` 的基础上加了一层 UI 模板。
	 * 
	 * - 请注意区分  `sn-drawer`和 `sn-float-board`。 `sn-drawer`是弹出层，需要调用方法才能显示；而  `sn-float-board` 则始终显示，且可以通过用户手势操作完全显露。（可以把  `sn-drawer` 理解为关闭的抽屉， `sn-float-board` 则是半开的抽屉）
	 * @property {String} position=[top|right|bottom|left]    String | 抽屉显示的位置
	 * @value top 顶部
	 * @value right 右侧
	 * @value bottom 底部
	 * @value left 左侧
	 * @property {Boolean} showLine    Boolean | 是否显示指示条
	 * @property {String} renderMode=[v-if|v-show]    String | 渲染模式
	 * @value v-if
	 * @value v-show
	 * @property {Boolean} slideClose    Boolean | 是否启用滑动关闭
	 * @property {String} width    String | 当`position`为`left``right`时抽屉的宽度
	 * @property {String} height    String | 当`position`为`top``bottom`时抽屉的高度
	 * @property {String} slideHeight    String | 抽屉纵向滑动阈值（达到阈值则关闭）
	 * @property {String} slideWidth    String | 抽屉横向滑动阈值（达到阈值则关闭）
	 * @property {String} bgColor    String | 抽屉的背景颜色
	 * @property {String} lineColor    String | 抽屉指示条颜色
	 * @property {String} padding    String | 抽屉内边距
	 * @property {String} borderRadius    String | 抽屉圆角大小
	 * @property {Number} aniTime    String | 抽屉显示/关闭动画时长（单位`ms`）
	 * @property {Boolean} preventBack    Boolean | 抽屉显示时是否阻止页面返回事件
	 * @property {Boolean} maskClose    Boolean | 是否启用点击遮罩关闭
	 * @property {Number} maskOpacity    Number | 遮罩透明度
	 * @property {UTSJSONObject} customStyle    UTSJSONObject | 自定义抽屉样式
	 * @event {Function} open   ()=>void | 打开抽屉时触发
	 * @event {Function} close   ()=>void | 关闭抽屉时触发
	 * @event {Function} clickMask   ()=>void | （仅`maskClose`为`true`时）点击遮罩时触发
	 */
	// 依赖
	import { $snui, SnTouchEvent, useFormatProp } from '../../index.uts'

	defineOptions({
		name: 'sn-drawer'
	})

	// SinleUI 配置
	const snu = $snui.utils;
	const colors = $snui.colors

	// 事件注册
	const emit = defineEmits(['open', 'close', 'clickMask'])

	// 组件属性
	const props = defineProps({
		renderMode: {
			type: String,
			default: 'v-if'
		},
		position: {
			type: String,
			default: 'bottom'
		},
		showLine: {
			type: Boolean,
			default: true
		},
		slideClose: {
			type: Boolean,
			default: true
		},
		width: {
			type: String,
			default: '300px'
		},
		slideWidth: {
			type: String,
			default: '100px'
		},
		height: {
			type: String,
			default: '300px'
		},
		slideHeight: {
			type: String,
			default: '100px'
		},
		bgColor: {
			type: String,
			default: ''
		},
		lineColor: {
			type: String,
			default: ''
		},
		padding: {
			type: String,
			default: '25px 15px 10px 15px'
		},
		borderRadius: {
			type: String,
			default: ''
		},
		aniTime: {
			type: String,
			default: $snui.configs.aniTime.long
		},
		preventBack: {
			type: Boolean,
			default: false
		},
		maskClose: {
			type: Boolean,
			default: true
		},
		maskOpacity: {
			type: Number,
			default: 0.3
		},
		customStyle: {
			type: Object as PropType<UTSJSONObject>,
			default: {} as UTSJSONObject
		}
	})

	// 基本变量
	const showPop = ref(false) // 控制弹出层
	const translate = ref(0)
	const animating = ref(true)
	const id = ref(snu.randomComId())
	const overlayEle = ref(null as SnOverlayComponentPublicInstance | null)

	// 计算属性
	const positionC = computed(() : string => {
		let positions = ['top', 'bottom', 'left', 'right']
		return positions.includes(props.position) ? props.position : 'bottom'
	})

	const verticalC = computed(() : boolean => {
		return positionC.value == 'top' || positionC.value == 'bottom'
	})

	const borderRadiusC = computed(() : string => {
		return useFormatProp('radius', props.borderRadius, $snui.configs.radius.xlarge)
	})

	const bgColorC = computed(() : string => {
		return useFormatProp('color', props.bgColor, colors.value.front)
	})
	
	const lineColorC = computed(() : string => {
		return useFormatProp('color', props.lineColor, colors.value.lineText)
	})
	
	const aniTimeOriginC = computed(() : string => {
		return useFormatProp('aniTime', props.aniTime, $snui.configs.aniTime.long)
	})

	const aniTimeC = computed(() : number => {
		let dur = parseInt(aniTimeOriginC.value)
		return  dur > 100 ? dur - 100 : dur
	})

	const lineStylesC = computed(() : Map<string, any> => {
		const styles = new Map<string, any>()
		styles.set('background', lineColorC.value)
		styles.set('border-radius', $snui.configs.radius.circle)
		if (verticalC.value) {
			styles.set('height', '5px')
			styles.set('left', '50%')
			styles.set('width', '60px')
			styles.set('transform', 'translateX(-50%)')
			styles.set(positionC.value == 'bottom' ? 'top' : 'bottom', '10px')
		} else {
			styles.set('width', '5px')
			styles.set('top', '50%')
			styles.set('height', '60px')
			styles.set('transform', 'translateY(-50%)')
			styles.set(positionC.value == 'left' ? 'right' : 'left', '10px')
		}
		return styles
	})

	const overlayStylesC = computed(() : UTSJSONObject => {
		return {
			justifyContent: !verticalC.value ? 'center' : (positionC.value == 'top' ? 'flex-start' : 'flex-end'),
			alignItems: !verticalC.value ? (positionC.value == 'left' ? 'flex-start' : 'flex-end'): ''
		}
	})

	const drawerStylesC = computed(() : Map<string, any> => {
		const styles = new Map<string, any>()
		let radius = borderRadiusC.value
		if (verticalC.value) {
			styles.set('width', '100%')
			styles.set('height', props.height)
		} else {
			styles.set('height', '100%')
			styles.set('width', props.width)
		}
		switch (positionC.value) {
			case 'top':
				styles.set('border-radius', `0 0 ${radius} ${radius}`)
				break
			case 'bottom':
				styles.set('border-radius', `${radius} ${radius} 0 0`)
				break
			case 'left':
				styles.set('border-radius', `0 ${radius} ${radius} 0`)
				break
			case 'right':
				styles.set('border-radius', `${radius} 0 0 ${radius}`)
				break
		}
		if (translate.value != 0) {
			styles.set('transform', `translate${verticalC.value ? 'Y' : 'X'}(${translate.value}px)`)
		}
		styles.set('background', bgColorC.value)
		styles.set('transition-duration', `${animating.value ? parseInt(aniTimeOriginC.value) : 0}ms`)
		styles.set('zIndex', $snui.configs.zIndex.popup)
		return styles
	})

	const drawerClassesC = computed(() : Map<string, any> => {
		let classes = new Map<string, any>()
		classes.set('animation', parseInt(aniTimeOriginC.value) > 0)
		classes.set('hover', showPop.value)
		classes.set(positionC.value, true)
		return classes
	})

	// 方法
	function open() {
		animating.value = true
		overlayEle.value?.open?.()
		snu.throttle(()=>{
			showPop.value = true
		} ,20, id.value + 'showpop')
		snu.throttle(()=>{
			animating.value = false
		} ,parseInt(aniTimeOriginC.value), id.value + 'animating')
		emit('open')
	}

	function close() {
		animating.value = true
		snu.throttle(()=>{
			showPop.value = false
			nextTick(() => {
				overlayEle.value?.close?.()
			})
		} ,20, id.value + 'closepop')
		emit('close')
	}

	function clickMask() {
		animating.value = true
		nextTick(()=>{
			showPop.value = false
		})
		emit('clickMask')
	}

	function ontouchmove(e : SnTouchEvent) {
		if (props.slideClose) {
			// #ifndef APP
			e.event.preventDefault()
			// #endif
			// #ifdef APP
			e.event.stopPropagation()
			// #endif
			let touch = e.touches[0]
			if (verticalC.value) {
				if (positionC.value == 'bottom') {
					translate.value = Math.max(touch.diffY, 0)
				} else if (positionC.value == 'top') {
					translate.value = Math.min(touch.diffY, 0)
				}
			} else {
				if (positionC.value == 'right') {
					translate.value = Math.max(touch.diffX, 0)
				} else if (positionC.value == 'left')
				{
					translate.value = Math.min(touch.diffX, 0)
				}
			}
		}
	}

	function ontouchend(e: SnTouchEvent) {
		if (props.slideClose) {
			if ((verticalC.value &&
				Math.abs(translate.value) >= snu.getPx(props.slideHeight)) ||
				(!verticalC.value &&
					Math.abs(translate.value) >= snu.getPx(props.slideWidth))) {
				translate.value = 0
				animating.value = true
				close()
			} else {
				animating.value = true
				translate.value = 0
				snu.debounce(() => {
					animating.value = false
				}, parseInt(aniTimeOriginC.value))
			}
		}
	}

	defineExpose({
		open,
		close
	})

	onBackPress((_) : boolean => {
		if (showPop.value) {
			if (!props.preventBack) {
				close()
			}
			return true
		} else {
			return false
		}
	})
</script>

<style lang="scss">
	.sn-drawer {
		width: 100%;

		&-line {
			position: absolute;
		}

		&.animation {
			&.bottom {
				transform: translateY(100%);
				opacity: 0;

				&.hover {
					transform: translateY(0%);
					opacity: 1;
				}
			}

			&.top {
				transform: translateY(-100%);
				opacity: 0;

				&.hover {
					transform: translateY(0%);
					opacity: 1;
				}
			}

			&.left {
				transform: translateX(-100%);
				opacity: 0;

				&.hover {
					transform: translateX(0%);
					opacity: 1;
				}
			}

			&.right {
				transform: translateX(100%);
				opacity: 0;

				&.hover {
					transform: translateX(0%);
					opacity: 1;
				}
			}
		}
	}
</style>