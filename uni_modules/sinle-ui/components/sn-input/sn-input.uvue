<template>
	<view class="sn-input-contain" 
	:class="{'disabled':disabled, 'loading':loading}" 
	:style="[containStylesC,customContainStyle]">
		<view class="sn-input" ref="sn-input" :style="inputViewStylesC">
			<slot name="prefix">
				<sn-icon v-if="showPrefixIcon"
				class="sn-input__prefixIcon" 
				:name="prefixIcon"
				:color="iconColorC" 
				:size="iconSizeC" 
				:custom-style="customPrefixIconStyle"
				@click="prefixClicked"
				:style="[{marginRight:'10px'}]"></sn-icon>
			</slot>
			<input class="sn-input__input" 
			:name="name" 
			:value="model" 
			:autoFocus="autoFocus"
			:type="type!='password'?type:'text'" 
			:cursorColor="cursorColor" 
			:confirmType="confirmType"
			:focus="focus" 
			:adjustPosition="adjustPosition" 
			:cursor="cursor"
			:selectionStart="selectionStart" 
			:selectionEnd="selectionEnd"
			:hold-keyboard="holdKeyboard" 
			:cursorSpacing="cursorSpacing"
			:confirmHold="confirmHold" 
			:disabled="disabled || readonly" 
			:inputmode="inputmode"
			:maxlength="maxlength"
			:password="password&&(!pwdVisible)" 
			:placeholder="placeholder"
			:placeholderStyle="placeholderStyle" 
			:placeholderClass="placeholderClass"
			@input="onInput" 
			@keyboardheightchange="onKeyboardheightchange"
			@focus="onFocus" 
			@blur="onBlur" 
			@confirm="onConfirm" 
			:style="[inputStylesC,customStyle]" />
			<slot name="suffix">
				<sn-icon v-if="showSuffixIcon" 
				class="sn-input__suffixIcon" 
				:name="suffixIcon"
				:color="iconColorC" 
				:size="iconSizeC" 
				:custom-style="customSuffixIconStyle"
				@click="suffixClicked"
				:style="[{marginRight:'5px'}]"></sn-icon>
			</slot>

			<sn-loading v-if="loading" 
			class="sn-input__loading" 
			:iconSize="iconSizeC"
			:iconColor="iconColorC"></sn-loading>
			<sn-icon v-if="clearable" 
			class="sn-input__clearBtn" 
			name="close-circle-fill"
			:size="iconSizeC" 
			:color="colors[theme=='light'?'infoDark':'dark']" 
			@click="clearContent"
			:style="clearBtnStylesC"></sn-icon>
			<sn-icon v-if="password" 
			class="sn-input__viewPwd"
			:name="pwdVisible?'eye-fill':'eye-off-fill'" 
			:color="colors[pwdVisible ? 'primary' : 'info']"
			:size="iconSizeC" 
			@click="pwdVisible=!pwdVisible"></sn-icon>
		</view>
	</view>
</template>

<script setup>
	/**
	 * @name sn-input
	 * @tutorial https://sinleui.pages.dev/components/sn-input
	 * @description Input 输入框
	 * 
	 * - 普普通通的输入框，在内置 `input` 组件上进一步扩展
	 * @property {String} vModel    String | 输入框文本内容
	 * @property {String} name    String | 表单的控件名称，作为键值对的一部分与表单(form组件)一同提交。同[`input`](https://doc.dcloud.net.cn/uni-app-x/component/input.html#%E5%B1%9E%E6%80%A7)。
	 * @property {Boolean} showBorder    Boolean | 是否显示边框
	 * @property {Boolean} showActiveBorder    Boolean | 激活状态下是否显示边框
	 * @property {String} borderColor    String | 输入框边框颜色
	 * @property {String} bgColor    String | 输入框背景颜色
	 * @property {String} textColor    String | 输入框文本颜色
	 * @property {String} iconColor    String | 输入框图标颜色
	 * @property {String} activeBorderColor    String | 激活状态下输入框边框颜色
	 * @property {String} activeBgColor    String | 激活状态下输入框背景颜色
	 * @property {String} disabledBgColor    String | 禁用状态下输入框背景颜色
	 * @property {String} disabledTextColor    String | 禁用状态下输入框文本颜色
	 * @property {Number} cursor    Number | 指定focus时的光标位置。同[`input`](https://doc.dcloud.net.cn/uni-app-x/component/input.html#%E5%B1%9E%E6%80%A7)。
	 * @property {String} cursorColor    String | 指定光标颜色
	 * @property {Number} cursorSpacing    Number | 指定光标与键盘的距离，单位`px`。取input距离底部的距离和`cursorSpacing`指定的距离的最小值作为光标与键盘的距离。同[`input`](https://doc.dcloud.net.cn/uni-app-x/component/input.html#%E5%B1%9E%E6%80%A7)。
	 * @property {Number} selectionStart    Number | 光标起始位置，自动聚集时有效，需与`selectionEnd`搭配使用。同[`input`](https://doc.dcloud.net.cn/uni-app-x/component/input.html#%E5%B1%9E%E6%80%A7)。
	 * @property {Number} selectionEnd    Number | 光标结束位置，自动聚集时有效，需与`selectionStart`搭配使用。同[`input`](https://doc.dcloud.net.cn/uni-app-x/component/input.html#%E5%B1%9E%E6%80%A7)。
	 * @property {String} placeholder    String | 输入框为空时占位符。同[`input`](https://doc.dcloud.net.cn/uni-app-x/component/input.html#%E5%B1%9E%E6%80%A7)。
	 * @property {String} placeholderStyle    String | 指定placeholder的样式。同[`input`](https://doc.dcloud.net.cn/uni-app-x/component/input.html#%E5%B1%9E%E6%80%A7)。
	 * @property {String} placeholderClass    String | 指定placeholder的样式类，目前仅支持color,font-size和font-weight。同[`input`](https://doc.dcloud.net.cn/uni-app-x/component/input.html#%E5%B1%9E%E6%80%A7)。
	 * @property {String} type=[text|number|digit|tel]    String | input的类型。同[`input`](https://doc.dcloud.net.cn/uni-app-x/component/input.html#%E5%B1%9E%E6%80%A7)。
	 * @value text 文本输入键盘
	 * @value number 数字输入键盘
	 * @value digit 带小数点的数字键盘
	 * @value tel 电话号码键盘
	 * @property {Boolean} password    Boolean | 是否是密码类型
	 * @property {Boolean} confirmHold    Boolean | 点击键盘右下角按钮时是否保持键盘不收起。同[`input`](https://doc.dcloud.net.cn/uni-app-x/component/input.html#%E5%B1%9E%E6%80%A7)。
	 * @property {Boolean} holdKeyboard    Boolean | focus时，点击页面的时候不收起键盘。同[`input`](https://doc.dcloud.net.cn/uni-app-x/component/input.html#%E5%B1%9E%E6%80%A7)。
	 * @property {Boolean} adjustPosition    Boolean | 键盘弹起时，是否自动上推页面。同[`input`](https://doc.dcloud.net.cn/uni-app-x/component/input.html#%E5%B1%9E%E6%80%A7)。
	 * @property {Boolean} focus    Boolean | 获取焦点。同[`input`](https://doc.dcloud.net.cn/uni-app-x/component/input.html#%E5%B1%9E%E6%80%A7)。
	 * @property {Boolean} loading    Boolean | 是否加载中
	 * @property {Boolean} disabled    Boolean | 是否禁用输入框
	 * @property {Boolean} readonly    Boolean | 是否只读（只读与禁用的区别是：禁用时除不可点击外，颜色也有所变化）
	 * @property {String} confirmType=[send|search|next|go|done]    String | 设置键盘右下角按钮的文字，仅在type为text时生效。同[`input`](https://doc.dcloud.net.cn/uni-app-x/component/input.html#%E5%B1%9E%E6%80%A7)。
	 * @value send 右下角按钮为“发送”文字，仅在type为text时生效
	 * @value search 右下角按钮为“搜索”文字，仅在type为text时生效
	 * @value next 右下角按钮为“下一个”文字，仅在type为text时生效
	 * @value go 右下角按钮为“前往”文字，仅在type为text时生效
	 * @value done 右下角按钮为“完成”文字，仅在type为text时生效
	 * @property {String} inputmode=[none|text|decimal|numeric|tel|search|email|url]    String | 是一个枚举属性，它提供了用户在编辑元素或其内容时可能输入的数据类型的提示。在符合条件的高版本webview里，uni-app的web和app-vue平台中可使用本属性。同[`input`](https://doc.dcloud.net.cn/uni-app-x/component/input.html#%E5%B1%9E%E6%80%A7)。
	 * @value none 默认值，不指定任何模式
	 * @value text 文本输入键盘
	 * @value decimal 小数点输入键盘
	 * @value numeric 数字输入键盘
	 * @value tel 电话号码输入键盘
	 * @value search 搜索输入键盘
	 * @value email 电子邮件输入键盘
	 * @value url 网址输入键盘
	 * @property {Boolean} autoFocus    Boolean | 自动获取焦点，与`focus`属性对比，此属性只会首次生效。同[`input`](https://doc.dcloud.net.cn/uni-app-x/component/input.html#%E5%B1%9E%E6%80%A7)。
	 * @property {Boolean} clearable    Boolean | 是否显示清除按钮
	 * @property {String} borderRadius    String | 输入框圆角大小
	 * @property {String} borderWidth    String | 输入框边框宽度
	 * @property {String} prefixIcon    String | 输入框前置图标
	 * @property {String} suffixIcon    String | 输入框后置图标
	 * @property {String} iconSize    String | 输入框图标字体大小
	 * @property {String} padding    String | 输入框内边距
	 * @property {Number} maxlength    Number | 最大输入长度，0和正数为合法值，非法值的时候不限制最大长度
	 * @property {String} textSize    String | 输入框文本字体大小
	 * @property {String} textFont    String | 输入框文本字体
	 * @property {String} align=[left|center|right]    String | 输入框文本对齐方式
	 * @value left 左对齐
	 * @value center 居中对齐
	 * @value right 右对齐
	 * @property {UTSJSONObject} customStyle    UTSJSONObject | 自定义输入框样式
	 * @property {UTSJSONObject} customPrefixIconStyle    UTSJSONObject | 自定义输入框前置图标样式
	 * @property {UTSJSONObject} customSuffixIconStyle    UTSJSONObject | 自定义输入框后置图标样式
	 * @property {UTSJSONObject} customContainStyle    UTSJSONObject | 自定义输入框容器样式
	 * @event {Function} input   (event:UniInputEvent)=>void | 当键盘输入时，触发input事件，`event.detail={value,cursor}`，处理函数可以直接return一个字符串，将替换输入框的内容。
	 * @event {Function} focus   (event:UniInputFocusEven)=>void | 输入框聚焦时触发，`event.detail={value,height}`，height为键盘高度
	 * @event {Function} blur   (event:UniInputBlurEvent)=>void | 输入框失去焦点时触发，`event.detail={value:value}`
	 * @event {Function} keyboardheightchange   (event:UniInputKeyboardHeightChangeEvent)=>void | 键盘高度发生变化的时候触发此事件，`event.detail={height:height,duration:duration}`
	 * @event {Function} confirm   (event:UniInputConfirmEvent)=>void | 点击完成按钮时触发，`event.detail={value:value}`
	 * @event {Function} suffixClick   ()=>void | 点击后置图标时触发
	 * @event {Function} prefixClick   ()=>void | 点击前置图标时触发
	 */
	
	// 依赖
	import { $snui, useFormatProp } from '../../index.uts'
	
	defineOptions({
		name: 'sn-input'
	})

	// SinleUI 配置
	const colors = $snui.colors
	const snu = $snui.utils

	// 事件注册
	const emit = defineEmits(['input', 'confirm', 'blur', 'focus', 'keyboardheightchange', 'prefix-click', 'suffix-click'])
	
	// 组件属性
	
	const model = defineModel({
		type: String,
		default: ''
	})
	
	const props = defineProps({
		name: {
			type: String,
			default: ''
		},
		showBorder: {
			type: Boolean,
			default: true
		},
		showActiveBorder: {
			type: Boolean,
			default: true
		},
		borderColor: {
			type: String,
			default: ''
		},
		bgColor: {
			type: String,
			default: ''
		},
		activeBgColor: {
			type: String,
			default: ''
		},
		disabledBgColor: {
			type: String,
			default: ''
		},
		disabledTextColor: {
			type: String,
			default: ''
		},
		iconColor: {
			type: String,
			default: ''
		},
		activeBorderColor: {
			type: String,
			default: ''
		},
		cursor: {
			type: Number,
			default: 0
		},
		cursorColor: {
			type: String,
			default: ''
		},
		cursorSpacing: {
			type: Number,
			default: 0
		},
		selectionStart: {
			type: Number,
			default: -1
		},
		selectionEnd: {
			type: Number,
			default: -1
		},
		placeholder: {
			type: String,
			default: ''
		},
		placeholderStyle: {
			type: String,
			default: ''
		},
		placeholderClass: {
			type: String,
			default: ''
		},
		type: {
			type: String,
			default: 'text'
		},
		password: {
			type: Boolean,
			default: false
		},
		confirmHold: {
			type: Boolean,
			default: false
		},
		holdKeyboard: {
			type: Boolean,
			default: false
		},
		adjustPosition: {
			type: Boolean,
			default: true
		},
		focus: {
			type: Boolean,
			default: false
		},
		loading: {
			type: Boolean,
			default: false
		},
		disabled: {
			type: Boolean,
			default: false
		},
		readonly: {
			type: Boolean,
			default: false
		},
		confirmType: {
			type: String,
			default: 'done'
		},
		inputmode: {
			type: String,
			default: 'text'
		},
		autoFocus: {
			type: Boolean,
			default: false
		},
		clearable: {
			type: Boolean,
			default: false
		},
		borderRadius: {
			type: String,
			default: ''
		},
		borderWidth: {
			type: String,
			default: '2px'
		},
		prefixIcon: {
			type: String,
			default: ''
		},
		suffixIcon: {
			type: String,
			default: ''
		},
		iconSize: {
			type: String,
			default: ''
		},
		padding: {
			type: String,
			default: '8px 13px'
		},
		maxlength: {
			type: Number,
			default: -1
		},
		textSize: {
			type: String,
			default: ''
		},
		textFont: {
			type: String,
			default: ''
		},
		textColor: {
			type: String,
			default: ''
		},
		align: {
			type: String,
			default: 'left'
		},
		customPrefixIconStyle: {
			type: Object as PropType<UTSJSONObject>,
			default: {} as UTSJSONObject
		},
		customSuffixIconStyle: {
			type: Object as PropType<UTSJSONObject>,
			default: {} as UTSJSONObject
		},
		customContainStyle: {
			type: Object as PropType<UTSJSONObject>,
			default: {} as UTSJSONObject
		},
		customStyle: {
			type: Object as PropType<UTSJSONObject>,
			default: {} as UTSJSONObject
		}
	})

	// 基本变量
	const inputId = snu.randomComId()
	const pwdVisible = ref(false)

	// 计算属性
	const isActive = computed(() : boolean => {
		return $snui.store.get('sn-input:FocusId') == inputId
	})
	
	const theme = computed(():string=>$snui.configs.app.theme)

	const showPrefixIcon = computed(() : boolean => {
		return !snu.isEmpty(props.prefixIcon)
	})
	const showSuffixIcon = computed(() : boolean => {
		return !snu.isEmpty(props.suffixIcon)
	})
	const showClearBtn = computed(() : boolean => {
		return !snu.isEmpty(model.value)
	})
	
	const textColorC = computed((): string => {
		return useFormatProp('color', props.textColor, colors.value.text)
	})
	
	const borderColorC = computed((): string => {
		return useFormatProp('color', props.borderColor, colors.value.line)
	})
	
	const bgColorC = computed((): string => {
		return useFormatProp('color', props.bgColor, colors.value.front)
	})
	
	const activeBgColorC = computed((): string => {
		return useFormatProp('color', props.activeBgColor, colors.value.front)
	})
	
	const disabledBgColorC = computed((): string => {
		return useFormatProp('color', props.disabledBgColor, colors.value.disabled)
	})
	
	const disabledTextColorC = computed((): string => {
		return useFormatProp('color', props.disabledTextColor, colors.value.disabledText)
	})
	
	const iconColorC = computed((): string => {
		return useFormatProp('color', props.iconColor, colors.value.text)
	})
	
	const activeBorderColorC = computed((): string => {
		return useFormatProp('color', props.activeBorderColor, colors.value.primary)
	})
	
	const iconSizeC = computed((): string => {
		return useFormatProp('font', props.iconSize, $snui.configs.font.size(4))
	})
	
	const borderRadiusC = computed((): string => {
		return useFormatProp('radius', props.borderRadius, $snui.configs.radius.small)
	})
	
	const textSizeC = computed((): string => {
		return useFormatProp('font', props.textSize, $snui.configs.font.baseSize)
	})
	
	const containStylesC = computed((): Map<string, any>=>{
		const styles = new Map<string, any>()
		styles.set('border-radius', borderRadiusC.value)
		return styles
	})
	
	const inputViewStylesC = computed((): Map<string, any>=>{
		const styles = new Map<string, any>()
		styles.set('border-radius', borderRadiusC.value)
		styles.set('padding', props.padding)
		styles.set('background', props.disabled?disabledBgColorC.value:(isActive.value?activeBgColorC.value: bgColorC.value))
		if (props.showBorder) {
			styles.set('border-style', 'solid')
			styles.set('border-width', props.borderWidth)
			styles.set('border-color', (props.showActiveBorder&&isActive.value)?activeBorderColorC.value:borderColorC.value)
		}
		styles.set('transition-duration',$snui.configs.aniTime.normal)
		return styles
	})
	
	const inputStylesC = computed((): Map<string, any>=>{
		const styles = new Map<string, any>()
		styles.set('fontSize', textSizeC.value)
		styles.set('textAlign', props.align)
		styles.set('fontFamily', props.textFont)
		styles.set('color', props.disabled?disabledTextColorC.value:textColorC.value)
		styles.set('transition-duration',$snui.configs.aniTime.normal)
		return styles
	})
	
	const clearBtnStylesC = computed((): Map<string, any>=>{
		const styles = new Map<string, any>()
		styles.set('transform', `scale(${showClearBtn.value?1:0})`)
		styles.set('transition-duration',$snui.configs.aniTime.normal)
		return styles
	})


	// 方法
	function clearContent() {
		model.value = ''
	}
	function onInput(e : UniInputEvent) {
		model.value = e.detail.value
		emit('input', e)
	}
	function onFocus(e : UniInputFocusEvent) {
		$snui.store.set('sn-input:FocusId', inputId)
		emit('focus', e)
	}
	function onBlur(e : UniInputBlurEvent) {
		$snui.store.set('sn-input:FocusId', '')
		emit('blur', e)
	}
	function onConfirm(e : UniInputConfirmEvent) {
		$snui.store.set('sn-input:FocusId', '')
		emit('confirm', e)
	}
	function onKeyboardheightchange(e : UniInputKeyboardHeightChangeEvent) {
		emit('keyboardheightchange', e)
	}
	function suffixClicked() {
		emit('suffix-click')
	}

	function prefixClicked() {
		emit('prefix-click')
	}
</script>

<style lang="scss">
	.sn-input {
		flex: 1;
		flex-direction: row;
		align-items: center;

		&__suffixIcon {
			margin-left: 5px;
		}

		&__loading {
			margin-left: 5px;
			padding-right: 5px;
		}

		&__input {
			border-width: 0 !important;
			flex: auto;
		}
	}

	.sn-input-contain {
		flex: 1;
	}
	
	.loading {
		// #ifdef WEB
		cursor: wait;
		// #endif
	}
	
	.disabled {
		// #ifdef WEB
		cursor: not-allowed;
		// #endif
	}
</style>