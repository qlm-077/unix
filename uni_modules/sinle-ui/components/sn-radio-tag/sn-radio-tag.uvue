<template>
	<sn-tag class="sn-radio-tag"
	ref="tagEle"
	:class="disabled?'disabled':''"
	:text="text"
	:bgColor="bgColorC"
	:textColor="textColorC"
	:textSize="tagTextSize"
	:customTextStyle="customTextStyle"
	:customStyle="customStyle"
	@click="radioClicked"
	:style="[tagStylesC, customTagStyle]"></sn-tag>
</template>

<script setup>
	/**
	 * @name sn-radio-tag
	 * @tutorial https://sinleui.pages.dev/components/sn-radio
	 * @description Radio 单选框
	 * 
	 * - 分为三个组件：`sn-radio-group` ,  `sn-radio` ,  `sn-radio-tag`。
	 * 
	 * - 每一个选项（`sn-radio` 或 `sn-radio-tag`）必须是 `sn-radio-group` 的子代。
	 * @property {String} text    String | tag单选组件内部文本内容
	 * @property {String} type=[info|primary|success|error|warning]    String | tag单选组件主题样式类型
	 * @value info 信息
	 * @value primary 主要
	 * @value success 成功
	 * @value error 错误
	 * @value warning 警告
	 * @property {String} level=[first|second|third|least]    String | tag单选组件等级
	 * @value first 第一等级
	 * @value second 第二等级
	 * @value third 第三等级
	 * @value least 最小等级
	 * @property {Boolean} disabled    Boolean | 是否禁用
	 * @property {UTSJSONObject} customStyle    UTSJSONObject | 自定义tag单选组件样式（仅针对单组件生效）
	 */
	// 依赖
	import { $snui } from '../../index.uts'
	
	defineOptions({
		name: 'sn-radio-tag'
	})
	
	// SinleUI 配置
	const colors = $snui.colors
	const snu = $snui.utils
	const instance = getCurrentInstance()!
	
	// 组件属性
	const props = defineProps({
		text: {
			type: String,
			default: ''
		},
		type: {
			type: String,
			default: ''
		},
		level: {
			type: String,
			default: ''
		},
		disabled: {
			type: Boolean,
			default: false
		},
		customStyle: {
			type: Object as PropType<UTSJSONObject>,
			default: {} as UTSJSONObject
		}
	})


	// 继承属性
	const tagType = inject('tagType',ref('primary'))
	const tagLevel = inject('tagLevel',ref('second'))
	const tagTextColor = inject('tagTextColor',ref(''))
	const disabledTagTextColor = inject('disabledTagTextColor',ref(''))
	const tagActiveTextColor = inject('tagActiveTextColor',ref(''))
	const disabledTagActiveTextColor = inject('disabledTagActiveTextColor',ref(''))
	const tagTextSize = inject('tagTextSize',ref(''))
	const tagBorderRadius = inject('tagBorderRadius',ref('10px'))
	const tagPadding = inject('tagPadding',ref("5px 8px"))
	const tagBgColor = inject('tagBgColor',ref(''))
	const disabledTagBgColor = inject('disabledTagBgColor',ref(''))
	const tagActiveBgColor = inject('tagActiveBgColor',ref(''))
	const disabledTagActiveBgColor = inject('disabledTagActiveBgColor',ref(''))
	const customTagStyle = inject('customTagStyle',ref({}))
	const customTextStyle = inject('customTextStyle',ref({}))

	// 基本变量
	const checked = ref(false)
	const tagEle = ref(null as UniElement | null)

	// 计算属性

	const disabledC = computed(() : boolean => {
		return props.disabled as boolean
	})

	const typeC = computed(() : string => {
		let types = ['info', 'warning', 'error', 'success', 'primary']
		let type = props.type as string
		type = snu.isEmpty(type) ? tagType.value as string : type
		return types.includes(type) ? type : 'info'
	})

	const levelC = computed(() : string => {
		let levels = ['first', 'second']
		let level = props.level as string
		level = snu.isEmpty(level) ? tagLevel.value as string : level
		return levels.includes(level) ? level : 'second'
	})

	const bgColorC = computed(() : string => {
		if (disabledC.value) {
			if (checked.value) {
				if (!snu.isEmpty(disabledTagActiveBgColor.value as string)) {
					return disabledTagActiveBgColor.value as string
				}
				return colors.value.disabledDark
			} else {
				if (!snu.isEmpty(disabledTagBgColor.value as string)) {
					return disabledTagBgColor.value as string
				}
				return colors.value.disabled;
			}
		} else {
			if (checked.value) {
				if (!snu.isEmpty(tagActiveBgColor.value as string)) {
					return tagActiveBgColor.value as string
				}
				if (typeC.value=='info') return colors.value.dark
				return colors.value[`${typeC.value}${levelC.value == 'second' ? 'Light' : ''}`] as string;
			} else {
				if (!snu.isEmpty(tagBgColor.value as string)) {
					return tagBgColor.value as string
				}
				return colors.value.info;
			}
		}
	});
	
	const textColorC = computed(() : string => {
		if (disabledC.value) {
			if (checked.value) {
				if (!snu.isEmpty(disabledTagActiveTextColor.value as string)) {
					return disabledTagActiveTextColor.value as string
				}
				return colors.value.disabledDarkText
			} else {
				if (!snu.isEmpty(disabledTagTextColor.value as string)) {
					return disabledTagTextColor.value as string
				}
				return colors.value.disabledText;
			}
		} else {
			if (checked.value) {
				if (!snu.isEmpty(tagActiveTextColor.value as string)) {
					return tagActiveTextColor.value as string
				}
				if (typeC.value=='info') return colors.value.front
				return colors.value[`${typeC.value}${levelC.value == 'second' ? '' : 'Dark'}`] as string;
			} else {
				if (!snu.isEmpty(tagTextColor.value as string)) {
					return tagTextColor.value as string
				}
				return colors.value.text;
			}
		}
	});
	
	const tagStylesC = computed((): Map<string, any>=>{
		const styles = new Map<string, any>()
		styles.set('border-radius', tagBorderRadius.value!)
		styles.set('padding', tagPadding.value)
		return styles
	})


	// 方法
	function updateValue(v : boolean) {
		checked.value = v
	}
	function radioClicked() {
		if (!(props.disabled)) {
			let ele = instance.proxy!
			snu.findParent(ele, ['sn-radio-group'])?.$callMethod('syncData', ele as ComponentPublicInstance)
		}
	}
	
	function setProps(data: Map<string, any>){
		tagType.value = data.get('tagType') as string;
		tagLevel.value = data.get('tagLevel') as string;
		tagTextColor.value = data.get('tagTextColor') as string;
		disabledTagTextColor.value = data.get('disabledTagTextColor') as string;
		tagActiveTextColor.value = data.get('tagActiveTextColor') as string;
		disabledTagActiveTextColor.value = data.get('disabledTagActiveTextColor') as string;
		tagTextSize.value = data.get('tagTextSize') as string;
		tagBorderRadius.value = data.get('tagBorderRadius') as string;
		tagPadding.value = data.get('tagPadding') as string;
		tagBgColor.value = data.get('tagBgColor') as string;
		disabledTagBgColor.value = data.get('disabledTagBgColor') as string;
		tagActiveBgColor.value = data.get('tagActiveBgColor') as string;
		disabledTagActiveBgColor.value = data.get('disabledTagActiveBgColor') as string;
		customTagStyle.value = data.get('customTagStyle') as UTSJSONObject;
		customTextStyle.value = data.get('customTextStyle') as UTSJSONObject;

	}

	defineExpose({
		setProps,
		updateValue
	})

	// 初始化
	onMounted(() => {
		nextTick(() => {
			let ele = instance.proxy!
			snu.findParent(ele, ['sn-radio-group'])?.$callMethod('register', ele as ComponentPublicInstance)
		})
	})
</script>

<style lang="scss">
	.sn-radio-tag {
		margin-right: 10px;
		margin-bottom: 10px;
		// #ifdef WEB
		cursor: pointer;
		// #endif
	}
	
	.disabled {
		// #ifdef WEB
		cursor: not-allowed;
		// #endif
	}
</style>