<template>
	<view class="sn-avatar"
	:style="[imageStylesC]">
	<image v-if="modeC=='image'&&!failed" 
	class="sn-avatar-image" 
	fade-show
	:mode="imageMode" 
	:src="src" 
	@load="loadOk"
	@error="loadFail" 
	@click="onClick" 
	@longpress="onlongpress"
	:style="[imageStylesC,customStyle]">
	</image>
	<view v-if="modeC!='image'||failed"
	 class="sn-avatar-placeholder" 
	 :style="[placeholderStylesC,customStyle]" @longpress="onlongpress" @click="onClick">
		<slot>
		<text v-if="modeC=='text'" 
		class="sn-avatar-placeholder-text"
		:style="[avatarTextStylesC,customTextStyle]">{{text.charAt(0)}}</text>
		<sn-icon v-else-if="modeC=='icon'||failed" 
		class="sn-avatar-placeholder-icon"
		:color="failed?colors.errorActive:iconColorC"
		:name="failed?'close-circle-fill':icon" 
		:size="iconSize"
		:customStyle="customIconStyle"></sn-icon>
		</slot>
	</view>
	</view>
</template>

<script setup>
	/**
	 * @name sn-avatar
	 * @tutorial https://sinleui.pages.dev/components/sn-avatar
	 * @description Avatar 头像
	 * 
	 * - 用以展示用户头像。
	 * @name
	 * @property {String} mode=[image|text|icon]    String | 头像展示模式
	 * @value image 图片模式
	 * @value text 大字模式
	 * @value icon 图标模式
	 * @property {String} imageMode=[scaleToFill|aspectFit|aspectFill|widthFix|heightFix|top|bottom|center|left|right|topleft|topright|bottomleft|bottomright]    String | 图片模式下头像的裁剪方式
	 * @value scaleToFill 不保持纵横比缩放图片，使图片的宽高完全拉伸至填满 image 元素
	 * @value aspectFit 保持纵横比缩放图片，使图片的长边能完全显示出来。也就是说，可以完整地将图片显示出来。
	 * @value aspectFill 保持纵横比缩放图片，只保证图片的短边能完全显示出来。也就是说，图片通常只在水平或垂直方向上被压缩，以完全适应 image 元素。
	 * @value widthFix 宽度不变，高度自动变化，保持原图宽高比不变
	 * @value heightFix 高度不变，宽度自动变化，保持原图宽高比不变
	 * @value top 不缩放图片，只显示图片的顶部区域
	 * @value bottom 不缩放图片，只显示图片的底部区域
	 * @value center 不缩放图片，只显示图片的中间区域
	 * @value left 不缩放图片，只显示图片的左边区域
	 * @value right 不缩放图片，只显示图片的右边区域
	 * @value topleft 不缩放图片，只显示图片的左上边区域
	 * @value topright 不缩放图片，只显示图片的右上边区域
	 * @value bottomleft 不缩放图片，只显示图片的左下边区域
	 * @value bottomright 不缩放图片，只显示图片的右下边区域
	 * @property {String} src    String | 图片模式下头像图片地址
	 * @property {String} text    String | 文本模式下头像内部文本
	 * @property {String} icon    String | 图标模式下头像内部图标名
	 * @property {String} size    String | 头像尺寸（外框的边长）
	 * @property {String} textSize    String | 文本模式下头像内部文本大小
	 * @property {String} textColor    String | 文本模式下头像内部文本颜色
	 * @property {String} iconSize    String | 图标模式下头像内部图标大小
	 * @property {String} iconColor    String | 图标模式下头像内部图标颜色
	 * @property {String} bgColor    String | 非图片模式下头像背景颜色
	 * @property {String} shape=[square|circle]    String | 头像形状
	 * @value square 方形（可设置圆角）
	 * @value circle 圆形
	 * @property {String} borderRadius    String | 头像圆角大小（仅`shape="square"`时生效）
	 * @property {Boolean} enablePreview    Boolean | 图片模式下启用图片预览
	 * @property {UTSJSONObject} customStyle    UTSJSONObject | 自定义头像样式
	 * @property {UTSJSONObject} customTextStyle    UTSJSONObject | 自定义头像内部文本样式
	 * @property {UTSJSONObject} customIconStyle    UTSJSONObject | 自定义头像内部图标样式
	 * @event {Function} click   (e:UniPointerEvent)=>void | 点击头像时触发
	 * @event {Function} dbclick   (e:UniPointerEvent)=>void | 双击头像时触发
	 * @event {Function} load   (e:UniImageLoadEvent)=>void | 头像加载完成时触发
	 * @event {Function} error   (e:UniImageErrorEvent)=>void | 头像加载失败时触发
	 * @event {Function} longpress   (e:UniEvent)=>void | 长按头像时触发
	 */

	// 依赖
	import { $snui, useFormatProp } from '../../index.uts'
	
	defineOptions({
		name: 'sn-avatar'
	})

	// SinleUI 配置
	const snu = $snui.utils;
	const colors = $snui.colors
	
	// 事件注册
	const emit = defineEmits(['click', 'dbclick', 'load', 'error', 'longpress'])
	
	// 组件属性
	const props = defineProps({
		mode: {
			type: String,
			default: 'image'
		},
		imageMode: {
			type: String,
			default: 'scaleToFill'
		},
		src: {
			type: String,
			default: ''
		},
		text: {
			type: String,
			default: ''
		},
		icon: {
			type: String,
			default: ''
		},
		size: {
			type: String,
			default: '40px'
		},
		textSize: {
			type: String,
			default: '25px'
		},
		textColor: {
			type: String,
			default: ''
		},
		iconSize: {
			type: String,
			default: '25px'
		},
		iconColor: {
			type: String,
			default: ''
		},
		bgColor: {
			type: String,
			default: ''
		},
		shape: {
			type: String,
			default: 'square'
		},
		borderRadius: {
			type: String,
			default: ''
		},
		enablePreview: {
			type: Boolean,
			default: false
		},
		customStyle: {
			type: Object as PropType<UTSJSONObject>,
			default: {} as UTSJSONObject
		},
		customTextStyle: {
			type: Object as PropType<UTSJSONObject>,
			default: {} as UTSJSONObject
		},
		customIconStyle: {
			type: Object as PropType<UTSJSONObject>,
			default: {} as UTSJSONObject
		}
	})
	
	// 基本变量
	const id = snu.randomComId()
	const failed = ref(false)
	const clickCnt = ref(0)
	
	// 计算属性
	const modeC = computed(():string=>{
		let modes = ['image', 'text', 'icon']
		return modes.includes(props.mode)?props.mode:'image'
	})
	const shapeC = computed(():string=>props.shape)
	
	const theme = computed(():string=>$snui.configs.app.theme)
	
	const iconColorC = computed((): string => {
		let color = theme.value == 'light' ? colors.value.infoDark : colors.value.dark as string
		return useFormatProp('color', props.iconColor, color)
	});
	
	const bgColorC = computed((): string => {
		return useFormatProp('color', props.bgColor, colors.value.info)
	});
	
	const textColorC = computed((): string => {
		let color = theme.value == 'light' ? colors.value.infoDark as string : colors.value.dark as string
		return useFormatProp('color', props.textColor, color)
	});

	const borderRadiusC = computed((): string => {
		return useFormatProp('radius', props.borderRadius, $snui.configs.radius.xsmall)
	})
	
	const imageStylesC = computed((): Map<string, any>=>{
		const styles = new Map<string, any>()
		styles.set('width', props.size)
		styles.set('height', props.size)
		styles.set('border-radius', props.shape!='circle'?borderRadiusC.value:$snui.configs.radius.circle)
		styles.set('transition-duration',$snui.configs.aniTime.normal)
		return styles
	})
	
	const placeholderStylesC = computed((): Map<string, any>=>{
		const styles = new Map<string, any>()
		styles.set('width', props.size)
		styles.set('height', props.size)
		styles.set('border-radius', props.shape!='circle'?borderRadiusC.value:$snui.configs.radius.circle)
		styles.set('background', failed.value?colors.value.disabled as string: bgColorC.value)
		styles.set('transition-duration',$snui.configs.aniTime.normal)
		return styles
	})
	
	const avatarTextStylesC = computed((): Map<string, any>=>{
		const styles = new Map<string, any>()
		styles.set('color', textColorC.value)
		styles.set('font-size', props.textSize)
		return styles
	})

	
	// 方法
	function loadOk(e : UniImageLoadEvent) {
		emit('load', e)
	}

	function loadFail(e : UniImageErrorEvent) {
		failed.value = true
		emit('error', e)
	}

	function onClick(event : UniPointerEvent) {
		clickCnt.value ++
		let clickType = 'click'
		snu.throttle(()=>{
			if (clickCnt.value == 1) {
				clickType = 'click'
				if ((props.enablePreview) && !failed.value && modeC.value == 'image') {
					uni.previewImage({
						urls: [props.src]
					})
				}
			} else if (clickCnt.value >= 2) {
				clickType = 'dbclick'
			}
			clickCnt.value = 0
			emit(clickType == 'click' ? 'click' : 'dbclick', event)
		}, 200, id)
	}



	function onlongpress(e : UniEvent) {
		emit('longpress', e)
	}
</script>

<style lang="scss">
	.sn-avatar {
		&-placeholder {
			display: flex;
			flex-direction: column;
			justify-content: center;

			&-text {
				text-align: center;
			}

			&-icon {
				text-align: center;
			}
		}
	}
</style>