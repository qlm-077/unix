<template>
	<view class="sn-more-contain">
		<view class="sn-more"
		:style="[moreStylesC, customStyle]">
			<view class="sn-more-wrap"
			ref="wrapEle">
				<slot></slot>
			</view>
			<view class="sn-more-mask"
			v-show="folded && showMore"
			:style="[maskStylesC]"></view>
		</view>
		<view class="sn-more-text-area"
		v-if="showMore"
		:class="disabled?'disabled':''"
		@click="onclick">
			<sn-text :text="folded?unfoldText:foldText"
			:color="disabled ? colors.disabledText : textColorC"
			:size="textSizeC"></sn-text>
			<sn-icon :name="showCustomIcon?icon:`arrow-${folded?'down':'up'}-s-line`"
			:color="disabled ? colors.disabledText : textColorC"
			:size="textSizeC"
			style="margin-left: 5px;"></sn-icon>
		</view>
	</view>
</template>

<script setup>
	/**
	 * @name sn-more
	 * @tutorial https://sinleui.pages.dev/components/sn-more
	 * @description  More 查看更多
	 *
	 *- 用于显示一个可折叠的内容区域。
	 *
	 *- 支持自定义提示文本、图标、颜色、动画时长、禁用等。
	 * @property {String} minHeight    String | 收起时的高度
	 * @property {String} unfoldText    String | 展开提示文本
	 * @property {String} foldText    String | 收起提示文本
	 * @property {String} icon    String | 自定义图标名称，会覆盖默认的展开和收起时的两个图标
	 * @property {String} textSize    String | 文本大小
	 * @property {String} textColor    String | 文本颜色
	 * @property {String} bgColor    String | 背景颜色
	 * @property {Boolean} disabled    Boolean | 是否禁用操作
	 * @property {Number} aniTime    String | 动画时间
	 * @property {UTSJSONObject} customStyle    UTSJSONObject | 自定义样式
	 * @event {Function} fold   ()=>void | 收起时触发
	 * @event {Function} unfold   ()=>void | 展开时触发
	 */

	// 依赖
	import { $snui, useResize, useFormatProp } from '../../index.uts'
	
	defineOptions({
		name: 'sn-more'
	})
	
	// SinleUI 配置
	const snu = $snui.utils;
	const colorLib = $snui.libs.color
	const colors = $snui.colors
	
	// 事件
	const emit = defineEmits(['fold', 'unfold'])
	
	// 组件属性
	const props = defineProps({
		minHeight: {
			type: String,
			default: '100px',
		},
		unfoldText: {
			type: String,
			default: '展开查看更多',
		},
		foldText: {
			type: String,
			default: '收起',
		},
		icon: {
			type: String,
			default: '',
		},
		textSize: {
			type: String,
			default: '',
		},
		textColor: {
			type: String,
			default: '',
		},
		bgColor: {
			type: String,
			default: '',
		},
		disabled: {
			type: Boolean,
			default: false
		},
		aniTime: {
			type: String,
			default: $snui.configs.aniTime.normal
		},
		customStyle: {
			type: Object as PropType<UTSJSONObject>,
			default: {} as UTSJSONObject as UTSJSONObject
		}
	})
	
	// 基本属性
	const wrapEle = ref(null as UniElement | null)
	const folded = ref(true)
	const contentHeight = ref(0)
	const showMore = ref(false)
	
	// 计算属性
	const showCustomIcon = computed(():boolean=>{
		return !snu.isEmpty(props.icon)
	})
	
	const bgColorC = computed(():string=>{
		return useFormatProp('color', props.bgColor, colors.value.front)
	})
	
	const aniTimeC = computed(():string=>{
		return useFormatProp('aniTime', props.aniTime, $snui.configs.aniTime.normal)
	})
	
	const textColorC = computed(():string=>{
		return useFormatProp('color', props.textColor, colors.value.textLight)
	})
	
	const textSizeC = computed(():string=>{
		return useFormatProp('font', props.textSize, $snui.configs.font.size(2))
	})
	
	const maskBgColor2C = computed(():string=>{
		return colorLib.tinyColor(bgColorC.value).setAlpha(0.5).toRgbString()
	})
	
	const moreStylesC = computed((): Map<string, any>=>{
		const styles = new Map<string, any>()
		let _contentHeight = snu.addPx(contentHeight.value)
		styles.set('height', folded.value ? (showMore.value ? props.minHeight : _contentHeight) : _contentHeight)
		styles.set('background', bgColorC.value)
		styles.set('transition-duration', aniTimeC.value)
		return styles
	})
	
	const maskStylesC = computed((): Map<string, any>=>{
		const styles = new Map<string, any>()
		if (showMore.value){
			styles.set('background-image', `linear-gradient(to top, ${bgColorC.value}, ${maskBgColor2C.value})`)
		}
		return styles
	})
	
	// 方法
	function init(){
		contentHeight.value = wrapEle.value?.getBoundingClientRect()?.height ?? 0
		if (contentHeight.value > snu.getPx(props.minHeight)) {
			showMore.value = true
		}
	}
	
	function onclick(){
		if (props.disabled) return
		if (folded.value) {
			folded.value = false
			emit('unfold')
		} else {
			folded.value = true
			emit('fold')
		}
	}

	
	onMounted(()=>{
		nextTick(()=>{
			init()
		})
		useResize(wrapEle.value, ()=>{
			init()
		})
	})
</script>

<style lang="scss">
	.sn-more {
		width: 100%;
		&-mask {
		    position: absolute;
		    left: 0;
		    bottom: 0;
		    width: 100%;
		    height: 100%;
		    display: flex;
		    flex-direction: column;
		    align-items: center;
		    justify-content: flex-end;
		}
		
		&-text-area {
			padding: 10px 0;
			flex-direction: row;
			align-items: center;
			justify-content: center;
		}
	}
	
	.disabled {
		// #ifdef WEB
		cursor: not-allowed;
		// #endif
	}
</style>
