<template>
	<text class="sn-text" 
	:selectable="selectable" 
	:space="space" 
	:decode="decode" 
	:style="[textStylesC, customStyle]" 
	@click="onClick">{{textC}}</text>
</template>

<script setup>
	/**
	 * @name sn-text
	 * @tutorial https://sinleui.pages.dev/components/sn-text
	 * @description  Text  文本
	 *
	 *- 只支持通过 `text` 属性传值（这个要是用插槽，反而会多套一层 `text`）
	 * @property {String} mode=[text|date|date-cn|price|price-upper|name|phone|phone-direct]    String | 文本显示模式
	 * @value text
	 * @value date
	 * @value date-cn
	 * @value price
	 * @value price-upper
	 * @value name
	 * @value phone
	 * @value phone-direct
	 * @property {String} text    String | 文本内容
	 * @property {String} color    String | 文本颜色
	 * @property {String} type=[primary|info|error|warning|success]    String | 文本类型
	 * @value primary
	 * @value info
	 * @value error
	 * @value warning
	 * @value success
	 * @property {String} font    String | 字体名称
	 * @property {String} size    String | 字体大小
	 * @property {String} align=[left|center|right]    String | 对齐方式
	 * @value left
	 * @value center
	 * @value right
	 * @property {String} overflow=[ellipsis|clip]    String | 文本溢出处理
	 * @value ellipsis
	 * @value clip
	 * @property {String} decorationLine    String | 文本装饰线
	 * @property {String} space    String | 字符间距。同[text](https://doc.dcloud.net.cn/uni-app-x/component/text.html#%E5%B1%9E%E6%80%A7)。
	 * @property {Boolean} decode    Boolean | 是否解码(app平台如需解析字符实体，需要配置为true)。同[text](https://doc.dcloud.net.cn/uni-app-x/component/text.html#%E5%B1%9E%E6%80%A7)。
	 * @property {Boolean} selectable    Boolean | 是否可选择同[text](https://doc.dcloud.net.cn/uni-app-x/component/text.html#%E5%B1%9E%E6%80%A7)。
	 * @property {Number} lines    Number | 文本最大显示行数（默认为`-1`即不限制）
	 * @property {String} lineHeight    String | 文本行高
	 * @property {String} aniTime    String | 文本动画时长
	 * @property {Boolean} bold    Boolean | 是否加粗
	 * @property {Boolean} encrypt    Boolean | 是否加密
	 * @property {UTSJSONObject} customStyle    UTSJSONObject | 自定义样式
	 * @property {UTSJSONObject} customTextStyle    UTSJSONObject | 自定义文本样式
	 */

	// 依赖
	import { $snui, useFormatProp } from '../../index.uts'
	
	defineOptions({
		name: 'sn-text'
	})
	
	// SinleUI 配置
	const colors = $snui.colors
	const snu = $snui.utils
	
	// 事件注册
	const emit = defineEmits(['click', 'transitionend'])
	
	// 组件属性
	const props = defineProps({
		mode: {
			type: String,
			default: "text"
		},
		text: {
			type: String,
			default: ""
		},
		color: {
			type: String,
			default: ""
		},
		type: {
			type: String,
			default: "info"
		},
		font: {
			type: String,
			default: ''
		},
		size: {
			type: String,
			default: ''
		},
		align: {
			type: String,
			default: "left"
		},
		overflow: {
			type: String,
			default: "ellipsis"
		},
		decorationLine: {
			type: String,
			default: ""
		},
		space: {
			type: String,
			default: ""
		},
		decode: {
			type: Boolean,
			default: false
		},
		bold: {
			type: Boolean,
			default: false
		},
		encrypt: {
			type: Boolean,
			default: false
		},
		selectable: {
			type: Boolean,
			default: false
		},
		lines: {
			type: Number,
			default: -1
		},
		lineHeight: {
			type: String,
			default: '1.2'
		},
		aniTime: {
			type: String,
			default: ''
		},
		customStyle: {
			type: Object as PropType<UTSJSONObject>,
			default: {} as UTSJSONObject
		}
	})


	// 计算属性
	const aniTimeC = computed(():string=>{
		return useFormatProp('aniTime', props.aniTime, $snui.configs.aniTime.normal)
	})
	
	const showCustomTextDecorationLine = computed(() : boolean => {
		return !snu.isEmpty(props.decorationLine)
	})

	const textC = computed(() : string => {
		let text = props.text
		let date = new Date()
		switch (props.mode) {
			case 'date':
				date = new Date(parseInt(text))
				return `${date.getFullYear()}-${(date.getMonth() + 1).toString().padStart(2, '0')}-${(date.getDate()).toString().padStart(2, '0')}`
			case 'date-cn':
				date = new Date(parseInt(text))
				return `${date.getFullYear()}年${(date.getMonth() + 1).toString().padStart(2, '0')}月${(date.getDate()).toString().padStart(2, '0')}日`
			case 'price':
				return '￥' + text
			case 'price-upper':
				return snu.numToUpper(text)
			case 'name':
				if (props.encrypt) {
					return snu.encryptName(text)
				}
			case 'bankcard':
				if (props.encrypt) {
					return snu.encryptBankCard(text)
				}
			case 'idcard':
				if (props.encrypt) {
					return snu.encryptIDCard(text)
				}
			case 'email':
				if (props.encrypt) {
					return snu.encryptEmail(text)
				}
			case 'phone': {
				if (props.encrypt) {
					return snu.encryptPhone(text)
				}
			}
		}
		return text
	})


	const typeC = computed(() : string => {
		let types = ['info', 'warning', 'error', 'success', 'primary']
		return types.includes(props.type) ? props.type : 'info'
	})

	const colorC = computed(() : string => {
		let color = props.color
		if (snu.isEmpty(color)) {
			if (typeC.value == 'info') return colors.value.text as string
			return colors.value[`${typeC.value}Dark`] != null ? colors.value[`${typeC.value}Dark`] as string : color
		} else {
			return useFormatProp('color',color, colors.value.text)
		}
	})
	
	const fontC = computed((): string => {
		return useFormatProp('font', props.font, $snui.configs.font.mainFamily)
	})
	
	const sizeC = computed((): string => {
		return useFormatProp('font', props.size, $snui.configs.font.size(2))
	})
	
	const textStylesC = computed((): Map<string, any>=>{
		const styles = new Map<string, any>()
		styles.set('color', colorC.value)
		styles.set('font-weight', props.bold?'bold':'')
		styles.set('font-size', sizeC.value)
		styles.set('font-family', fontC.value)
		if (props.lines > -1){
			// #ifdef APP
			styles.set('lines', props.lines)
			// #endif
			// #ifndef APP
			styles.set('display', '-webkit-box')
			styles.set('-webkit-box-orient', 'vertical')
			styles.set('-webkit-line-clamp', props.lines)
			styles.set('overflow', 'hidden')
			// #endif
		}
		styles.set('text-decorationLine', showCustomTextDecorationLine.value?props.decorationLine:(props.mode=='link'?'underline':props.decorationLine))
		styles.set('line-height', props.lineHeight)
		styles.set('text-align', props.align)
		styles.set('text-overflow', props.overflow)
		styles.set('transition-duration',aniTimeC.value)
		return styles
	})
	
	// 方法
	function onClick(e: UniPointerEvent) {
		if (!(props.encrypt)) {
			emit('click', e)
			let phoneNumbers = (props.text).match(/^\d+$/gsim) ?? [] as string[]
			switch (props.mode) {
				case 'phone':
					if (phoneNumbers.length == 0) {
						uni.showToast({
							title: '未匹配到电话号码',
							icon: "error"
						})
					} else {
						let phone = phoneNumbers[0] as string
						uni.showModal({
							title: '提示',
							content: '拨打 ' + phone,
							success: (res) => {
								if (res.confirm) {
									snu.makePhoneCall(phone)
								}
							}
						})
					}
				case 'phone-direct':
					if (phoneNumbers.length == 0) {
						uni.showToast({
							title: '未匹配到电话号码',
							icon: "error"
						})
					} else {
						snu.makePhoneCall(phoneNumbers[0] as string)
					}
				case 'link':
					snu.openLink(props.text)
			}
		}
	}
</script>

<style lang="scss">
	.sn-text {
		transition-property: transform, color, font-size;
	}
</style>