import { ExecuteBatchRequestResult } from '../utssdk/interface';

export class BatchRequestManager {
	private requests: Promise<any>[] = [];
	
	addRequest(request: Promise<any>): Promise<any> {
		this.requests.push(request);
		return request;
	}
	
	addBatchRequest(requests: Promise<any>[]): Promise<any>[] {
		this.requests = requests;
		return this.requests;
	}
	
	async executeBatch(): Promise<ExecuteBatchRequestResult[]> {
		// const results = await Promise.all(this.requests);
		// this.requests = [];
		// return results;
		const settedResutls = await Promise.allSettled(this.requests)
		this.requests = [];
		
		return settedResutls.map((result): ExecuteBatchRequestResult => {
			if (result.status == 'fulfilled') {
				// #ifndef APP-ANDROID
				// #ifndef APP-HARMONY
				return { value: result['value'], error: null }
				// #endif
				// #ifdef APP-HARMONY
				return { value: result.value, error: null }
				// #endif
				// #endif
				// #ifdef APP-ANDROID
				let res = {} as ExecuteBatchRequestResult
				if (result instanceof PromiseFulfilledResult) {
					return { value: result.value, error: null } as ExecuteBatchRequestResult
				}
				if (result instanceof PromiseRejectedResult) {
					return { value: null, error: result.reason } as ExecuteBatchRequestResult
				}
				return res
				// #endif
			} else {
				// #ifndef APP-ANDROID
				// #ifndef APP-HARMONY
				return { value: null, error: result['reason'] } as ExecuteBatchRequestResult
				// #endif
				// #ifdef APP-HARMONY
				return { value: null, error: result.reason } as ExecuteBatchRequestResult
				// #endif
				// #endif
				// #ifdef APP-ANDROID
				if (result instanceof PromiseRejectedResult) {
					return { value: null, error: result.reason } as ExecuteBatchRequestResult
				}
				return { value: null, error: result } as ExecuteBatchRequestResult
				// #endif
			}
		});
	}
};